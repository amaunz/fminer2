# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _bbrc
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _bbrc.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _bbrc.PySwigIterator_value(*args)
    def incr(*args): return _bbrc.PySwigIterator_incr(*args)
    def decr(*args): return _bbrc.PySwigIterator_decr(*args)
    def distance(*args): return _bbrc.PySwigIterator_distance(*args)
    def equal(*args): return _bbrc.PySwigIterator_equal(*args)
    def copy(*args): return _bbrc.PySwigIterator_copy(*args)
    def next(*args): return _bbrc.PySwigIterator_next(*args)
    def previous(*args): return _bbrc.PySwigIterator_previous(*args)
    def advance(*args): return _bbrc.PySwigIterator_advance(*args)
    def __eq__(*args): return _bbrc.PySwigIterator___eq__(*args)
    def __ne__(*args): return _bbrc.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _bbrc.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _bbrc.PySwigIterator___isub__(*args)
    def __add__(*args): return _bbrc.PySwigIterator___add__(*args)
    def __sub__(*args): return _bbrc.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _bbrc.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class SVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _bbrc.SVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _bbrc.SVector___nonzero__(*args)
    def __len__(*args): return _bbrc.SVector___len__(*args)
    def pop(*args): return _bbrc.SVector_pop(*args)
    def __getslice__(*args): return _bbrc.SVector___getslice__(*args)
    def __setslice__(*args): return _bbrc.SVector___setslice__(*args)
    def __delslice__(*args): return _bbrc.SVector___delslice__(*args)
    def __delitem__(*args): return _bbrc.SVector___delitem__(*args)
    def __getitem__(*args): return _bbrc.SVector___getitem__(*args)
    def __setitem__(*args): return _bbrc.SVector___setitem__(*args)
    def append(*args): return _bbrc.SVector_append(*args)
    def empty(*args): return _bbrc.SVector_empty(*args)
    def size(*args): return _bbrc.SVector_size(*args)
    def clear(*args): return _bbrc.SVector_clear(*args)
    def swap(*args): return _bbrc.SVector_swap(*args)
    def get_allocator(*args): return _bbrc.SVector_get_allocator(*args)
    def begin(*args): return _bbrc.SVector_begin(*args)
    def end(*args): return _bbrc.SVector_end(*args)
    def rbegin(*args): return _bbrc.SVector_rbegin(*args)
    def rend(*args): return _bbrc.SVector_rend(*args)
    def pop_back(*args): return _bbrc.SVector_pop_back(*args)
    def erase(*args): return _bbrc.SVector_erase(*args)
    def __init__(self, *args): 
        this = _bbrc.new_SVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _bbrc.SVector_push_back(*args)
    def front(*args): return _bbrc.SVector_front(*args)
    def back(*args): return _bbrc.SVector_back(*args)
    def assign(*args): return _bbrc.SVector_assign(*args)
    def resize(*args): return _bbrc.SVector_resize(*args)
    def insert(*args): return _bbrc.SVector_insert(*args)
    def reserve(*args): return _bbrc.SVector_reserve(*args)
    def capacity(*args): return _bbrc.SVector_capacity(*args)
    __swig_destroy__ = _bbrc.delete_SVector
    __del__ = lambda self : None;
SVector_swigregister = _bbrc.SVector_swigregister
SVector_swigregister(SVector)

class Bbrc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bbrc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bbrc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bbrc.new_Bbrc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bbrc.delete_Bbrc
    __del__ = lambda self : None;
    def Reset(*args): return _bbrc.Bbrc_Reset(*args)
    def Defaults(*args): return _bbrc.Bbrc_Defaults(*args)
    def GetMinfreq(*args): return _bbrc.Bbrc_GetMinfreq(*args)
    def GetType(*args): return _bbrc.Bbrc_GetType(*args)
    def GetBackbone(*args): return _bbrc.Bbrc_GetBackbone(*args)
    def GetDynamicUpperBound(*args): return _bbrc.Bbrc_GetDynamicUpperBound(*args)
    def GetPruning(*args): return _bbrc.Bbrc_GetPruning(*args)
    def GetConsoleOut(*args): return _bbrc.Bbrc_GetConsoleOut(*args)
    def GetAromatic(*args): return _bbrc.Bbrc_GetAromatic(*args)
    def GetRefineSingles(*args): return _bbrc.Bbrc_GetRefineSingles(*args)
    def GetDoOutput(*args): return _bbrc.Bbrc_GetDoOutput(*args)
    def GetBbrcSep(*args): return _bbrc.Bbrc_GetBbrcSep(*args)
    def GetChisqActive(*args): return _bbrc.Bbrc_GetChisqActive(*args)
    def GetChisqSig(*args): return _bbrc.Bbrc_GetChisqSig(*args)
    def GetRegression(*args): return _bbrc.Bbrc_GetRegression(*args)
    def SetMinfreq(*args): return _bbrc.Bbrc_SetMinfreq(*args)
    def SetType(*args): return _bbrc.Bbrc_SetType(*args)
    def SetBackbone(*args): return _bbrc.Bbrc_SetBackbone(*args)
    def SetDynamicUpperBound(*args): return _bbrc.Bbrc_SetDynamicUpperBound(*args)
    def SetPruning(*args): return _bbrc.Bbrc_SetPruning(*args)
    def SetConsoleOut(*args): return _bbrc.Bbrc_SetConsoleOut(*args)
    def SetAromatic(*args): return _bbrc.Bbrc_SetAromatic(*args)
    def SetRefineSingles(*args): return _bbrc.Bbrc_SetRefineSingles(*args)
    def SetDoOutput(*args): return _bbrc.Bbrc_SetDoOutput(*args)
    def SetBbrcSep(*args): return _bbrc.Bbrc_SetBbrcSep(*args)
    def SetChisqActive(*args): return _bbrc.Bbrc_SetChisqActive(*args)
    def SetChisqSig(*args): return _bbrc.Bbrc_SetChisqSig(*args)
    def SetRegression(*args): return _bbrc.Bbrc_SetRegression(*args)
    def SetMaxHops(*args): return _bbrc.Bbrc_SetMaxHops(*args)
    def MineRoot(*args): return _bbrc.Bbrc_MineRoot(*args)
    def ReadGsp(*args): return _bbrc.Bbrc_ReadGsp(*args)
    def AddCompound(*args): return _bbrc.Bbrc_AddCompound(*args)
    def AddActivity(*args): return _bbrc.Bbrc_AddActivity(*args)
    def GetNoRootNodes(*args): return _bbrc.Bbrc_GetNoRootNodes(*args)
    def GetNoCompounds(*args): return _bbrc.Bbrc_GetNoCompounds(*args)
Bbrc_swigregister = _bbrc.Bbrc_swigregister
Bbrc_swigregister(Bbrc)
cvar = _bbrc.cvar



